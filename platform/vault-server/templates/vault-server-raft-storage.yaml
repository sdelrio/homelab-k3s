# Samples in: https://github.com/banzaicloud/bank-vaults/tree/main/operator/deploy
apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: "vault"
spec:
  size: 1
  image: vault:1.11.3
  # https://github.com/orgs/banzaicloud/packages/container/bank-vaults/versions 
  # specify a custom bank-vaults image with bankVaultsImage:
  # bankVaultsImage: ghcr.io/banzaicloud/bank-vaults:latest

  # Set use which node label for pod anti-affinity. Prevent all vault put on same  node
  podAntiAffinity: kubernetes.io/hostname

  # Common annotations for all created resourceef
  #annotations:
  #  common/annotation: "true"

  # Vault Pods , Services and TLS Secret annotations
  #vaultAnnotations:
  #  type/instance: "vault"

  # Vault Configurer Pods and Services annotations
  #vaultConfigurerAnnotations:
  #  type/instance: "vaultconfigurer"

  # Vault Pods, Services and TLS Secret labels
  #vaultLabels:
  #  example.com/log-format: "json"

  # Vault Configurer Pods and Services labels
  #vaultConfigurerLabels:
  #  example.com/log-format: "string"

  # Support for affinity Rules, same as in PodSpec
  # affinity:
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       nodeSelectorTerms:
  #       - matchExpressions:
  #         - key : "node-role.kubernetes.io/your_role"
  #           operator: In
  #           values: ["true"]

  # Support for pod nodeSelector rules to control which nodes can be chosen to run
  # the given pods
  # nodeSelector:
  #   "node-role.kubernetes.io/your_role": "true"

  # Support for node tolerations that work together with node taints to control
  # the pods that can like on a node
  # tolerations:
  # - effect: NoSchedule
  #   key: node-role.kubernetes.io/your_role
  #   operator: Equal
  #   value: "true"

  # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
  serviceAccount: vault

  # Specify the Service's type where the Vault Service is exposed
  # Please note that some Ingress controllers like https://github.com/kubernetes/ingress-gce
  # forces you to expose your Service on a NodePort
  serviceType: ClusterIP

  # Specify existing secret contains TLS certificate (accepted secret type: kubernetes.io/tls)
  # If it is set, generating certificate will be disabled
  # existingTlsSecretName: selfsigned-cert-tls

  # Specify threshold for renewing certificates. Valid time units are "ns", "us", "ms", "s", "m", "h".
  # tlsExpiryThreshold: 168h

  ingress:
    annotations:
      #cert-manager.io/cluster-issuer: internal
      hajimari.io/appName: Vault
      hajimari.io/icon: database-lock
    spec:
      ingressClassName: nginx-internal
      rules:
        - host: &host vault.k3s.lorien.cloud
          http:
            paths:
              - backend:
                  service:
                    name: vault
                    port:
                      number: 8200
                path: /
                pathType: Prefix
      tls:
        - hosts:
            - *host

  # A YAML representation of resource ResourceRequirements for vault container
  # Detail can reference: https://kubernetes.io/docs/concepts/configuration/mange-compute-resources-container
  resources:
    vault:
      limits:
        memory: 128Mi
        cpu: 100m
      requests:
        memory: 128Mi
        cpu: 50m

  # Use local disk to store Vault file data, see config section.
  volumeClaimTemplates:
    - metadata:
        name: vault-raft
      spec:
        storageClassName: "openebs-hostpath" # Empty string must be explicitly set otherwise default StorageClass will be set
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

  volumeMounts:
    - name: vault-raft
      mountPath: /vault/file

  # Support for distributing the generated CA certificate Secret to other namespaces.
  # Define a list of namespaces or use ["*"] for all namespaces.
  caNamespaces:
    - "external-secrets"

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      # This is true by default
      preFlightChecks: true
      # The storeRootToken flag enables storing of root token in chosen storage
      # This is true by default
      storeRootToken: true
    kubernetes:
      secretNamespace: {{ .Release.Namespace }}

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      raft:
        path: "${ .Env.VAULT_STORAGE_FILE }" # An example how Vault config environment interpolation can be used
        performance_multiplier: 1
    listener:
      tcp:
        address: "0.0.0.0:8200"
        # Uncommenting the following line and deleting tls_cert_file and tls_key_file disables TLS
        # tls_disable: true
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    disable_mlock: true
    telemetry:
      statsd_address: localhost:9125
    api_addr: https://vault.vault-server:8200
    cluster_addr: "https://${.Env.POD_NAME}:8201"
    ui: true

  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      # Supported values: trace, debug, info, warn & err
      value: info
    - name: VAULT_STORAGE_FILE
      value: "/vault/file"

  serviceRegistrationEnabled: true

  # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
  # The repository also contains a lot examples in the deploy/ and operator/deploy directories.
  externalConfig:
    policies:
      - name: allow_secrets
        rules: path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: allow_pki
        rules: path "pki/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }

    auth:
      - type: kubernetes
        path: kubernetes
        roles:
          # Allow external-secrets o use the secret kv store
          - name: external-secretes
            bound_service_account_names: ["external-secrets"]
            bound_service_account_namespaces: ["external-secrets"]
            policies: ["allow_secrets"]
            ttl: 1h
          # Allow the cert-manager pod in the cert-manager namespace to use the PKI engine
          - name: cert-manager
            bound_service_account_names: ["cert-manager"]
            bound_service_account_namespaces: ["cert-manager"]
            policies: ["allow_pki"]
            ttl: 1h
    groups:
      - name: admin1
        policies:
          - allow_secrets
        metadata:
          privileged: true
        type: external
      - name: admin2
        policies:
          - allow_secrets
        metadata:
          privileged: true
        type: external

    group-aliases:
      - name: admin1
        mountpath: token
        group: admin1

    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2

      - type: pki
        description: Vault PKI Backend
        config:
          default_lease_ttl: 144h
          max_lease_ttl: 144h
        configuration:
          config:
          - name: urls
            issuing_certificates: https://vault.vault-server:8200/v1/pki/ca
            crl_distribution_points: https://vault.vault-server:8200/v1/pki/crl
          root/generate:
          - name: exported
            common_name: vault.vault-server
            create_only: true
            save_to: "secret/data/pki/ca"


  # If you are using a custom certificate and are setting the hostname in a custom way
  # sidecarEnvsConfig:
  #   - name: VAULT_ADDR
  #     value: https://vault.local:8200

  # # https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  # vaultPodSpec:
  #   hostAliases:
  #   - ip: "127.0.0.1"
  #     hostnames:
  #     - "vault.local"

  # It is possible to override the Vault container directly:
  # vaultContainerSpec:
  #   lifecycle:
  #     postStart:
  #       exec:
  #         command:
  #              - setcap cap_ipc_lock=+ep /vault/plugins/orchestrate

  # Marks presence of Istio, which influences things like port namings
  istioEnabled: false

---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: vault-raft
#spec:
#  storageClassName: "openebs-hostpath" # Empty string must be explicitly set otherwise default StorageClass will be set
#  accessModes:
#    - ReadWriteOnce
#  resources:
#    requests:
#      storage: 250Mi
#---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: vault-file
#spec:
#  storageClassName: "openebs-hostpath" # Empty string must be explicitly set otherwise default StorageClass will be set
#  volumeName: vault-file
#  accessModes:
#    - ReadWriteOnce
#  resources:
#    requests:
#      storage: 1Gi

